use crate::route_index::create_search_index;
use crate::routes::Route;
use gloo_console as console;
use wonopui::prelude::*;
use yew::prelude::*;
use yew_router::prelude::*;
use yew::prelude::*;
use yew_router::prelude::*;

#[derive(Properties, PartialEq)]
pub struct DocumentationLayoutProps {
    pub children: Children,
}

#[function_component(DarkModeSwitch)]
fn dark_mode_switch() -> Html {
    let document = web_sys::window().unwrap().document().unwrap();
    let body = document.body().unwrap();
    // let dark_mode = body.class_list().contains("dark");
    let mode_preference = use_media_query("(prefers-color-scheme: dark)");
    {
        let body = body.clone();
        let mode_preference = mode_preference.clone();
        use_effect_with((mode_preference,), move |(mode_preference,)| {
            if *mode_preference {
                body.class_list().add_1("dark").unwrap();
            } else {
                body.class_list().remove_1("dark").unwrap();
            }
        });
    }
    let toggle_theme = {
        Callback::from(move |_| {
            if body.class_list().contains("dark") {
                body.class_list().remove_1("dark").unwrap();
            } else {
                body.class_list().add_1("dark").unwrap();
            }
        })
    };

    html! {
        <SwitchButton
            default_value={mode_preference}
            on_toggle={toggle_theme.clone()}
            off_icon={html!{
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z" />
                </svg>
            }}
            on_icon={html!{
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z" />
                </svg>
            }}
        />
    }
}

#[derive(Properties, PartialEq)]
pub struct LogoProps {
    pub class: Classes,
}

#[function_component(Logo)]
fn logo(props: &LogoProps) -> Html {
    let padding = 0.0;
    let width = 469.7873;
    let height = 471.293;
    let offset_x = -28.609066 - padding * width;
    let offset_y = -0.31497955 - padding * height;
    let width = (1.0 + 2. * padding) * width;
    let height = (1.0 + 2. * padding) * height;
    html! {
        <svg class={props.class.clone()} viewBox={format!("{} {} {} {}", offset_x, offset_y, width, height)} stroke="none" fill="currentColor"><path d="M0 0 C0.72969285 -0.00350607 1.4593857 -0.00701215 2.21119046 -0.01062447 C4.65142755 -0.01991362 7.09142467 -0.01502163 9.53167152 -0.01015663 C11.30084001 -0.01389413 13.07000684 -0.01849605 14.83917105 -0.02388728 C19.6972742 -0.0361201 24.5553085 -0.03585648 29.41342354 -0.03349853 C34.65415953 -0.03309044 39.89487343 -0.04412867 45.13559914 -0.05361366 C55.40140085 -0.07022565 65.6671796 -0.07572328 75.93299364 -0.07683842 C84.27657507 -0.0777887 92.62014892 -0.08189797 100.96372795 -0.08823967 C124.61658348 -0.10585178 148.26942085 -0.11507846 171.92228298 -0.11357872 C173.19738175 -0.11349881 174.47248052 -0.1134189 175.78621864 -0.11333656 C177.70120029 -0.11321392 177.70120029 -0.11321392 179.65486844 -0.1130888 C200.35095904 -0.11227567 221.04697689 -0.13142029 241.74304645 -0.1596133 C262.99093988 -0.18832981 284.23879781 -0.2021543 305.48671114 -0.20042574 C317.41693482 -0.19976147 329.34708223 -0.20527036 341.27728844 -0.22678185 C351.43351732 -0.24497728 361.58963533 -0.24935433 371.74587344 -0.235763 C376.92774652 -0.22922542 382.10940682 -0.2291448 387.29125977 -0.2464695 C392.03606626 -0.26216992 396.7804907 -0.25936752 401.5252877 -0.24190123 C403.24057214 -0.2388247 404.95588488 -0.24248831 406.67113595 -0.25362138 C416.79604833 -0.31497955 425.13365484 -0.12542071 433.27645302 6.56976891 C438.3619373 12.8176496 440.5864748 18.22890642 440.60096741 26.329566 C440.60361923 27.05772063 440.60627106 27.78587525 440.60900325 28.53609517 C440.61671034 30.99513228 440.61725596 33.45411956 440.61785316 35.91316795 C440.62186687 37.68642013 440.62630493 39.45967139 440.63113272 41.23292154 C440.6431145 46.12091501 440.64875039 51.00889859 440.65331388 55.89690387 C440.65926393 61.16294687 440.6708753 66.42897803 440.68160439 71.69501305 C440.70614263 84.42065131 440.72075791 97.1462935 440.73366445 109.87194815 C440.73737544 113.46532293 440.74134875 117.05869732 440.74541712 120.65207171 C440.77065338 142.9586462 440.79271008 165.26522129 440.80514526 187.57180691 C440.80807504 192.74031705 440.81103669 197.90882717 440.81405067 203.07733727 C440.81479673 204.36197262 440.81554278 205.64660798 440.81631143 206.97017168 C440.82896605 227.78224901 440.86218966 248.59424093 440.90385251 269.40627832 C440.94626158 290.76591656 440.96983915 312.12551105 440.97506583 333.48519129 C440.97848117 345.48092627 440.99025095 357.4765278 441.02316856 369.47222137 C441.05115611 379.68818098 441.06217406 389.90397977 441.0509731 400.11997474 C441.04578313 405.33237383 441.04869551 410.54443609 441.07343864 415.75678635 C441.09591203 420.53085394 441.09520596 425.30434236 441.07623477 430.07841998 C441.0734321 431.80326922 441.07904819 433.52815758 441.09404771 435.25294388 C441.17821147 445.56332854 440.85561862 454.4029889 433.5034374 462.38600022 C427.27886795 468.46532056 420.43085821 470.62990322 411.83888626 470.64037895 C411.11171591 470.64533847 410.38454556 470.65029798 409.63533974 470.65540779 C407.2095915 470.66831503 404.78439813 470.65999498 402.35863686 470.65167809 C400.59756563 470.6565693 398.83649762 470.66276017 397.07543504 470.67013597 C392.2442956 470.68652928 387.41331942 470.68421879 382.5821619 470.67876101 C377.36868159 470.67609008 372.15524472 470.69062375 366.941782 470.70285606 C356.73125245 470.72390925 346.52077968 470.72845099 336.31023099 470.72666818 C328.01101477 470.72536055 319.71181626 470.72916472 311.41260338 470.73659325 C309.02202777 470.73869244 306.63145216 470.74079004 304.24087656 470.74288607 C302.4560962 470.74445136 302.4560962 470.74445136 300.63525967 470.74604827 C278.13271561 470.76495003 255.63020415 470.76390057 233.12765543 470.75707895 C212.54221501 470.75150292 191.95689903 470.77233161 171.37148769 470.80543941 C150.23316344 470.83917257 129.09489881 470.85434525 107.95654714 470.84972239 C96.08944894 470.8474774 84.22246576 470.85272526 72.35539055 470.87761497 C62.25299022 470.89862314 52.15076799 470.90222474 42.04836036 470.88331538 C36.89466848 470.87415486 31.74130872 470.87302449 26.58764267 470.89367104 C21.86741742 470.91237194 17.14779653 470.90788733 12.42759435 470.88512522 C10.72241697 470.88093727 9.01719333 470.88514605 7.31206484 470.89872116 C-3.38094795 470.97803683 -11.71264732 470.18146715 -20.19229698 463.01117516 C-20.80073448 462.28801109 -21.40917198 461.56484703 -22.03604698 460.81976891 C-22.97964073 459.73889 -22.97964073 459.73889 -23.94229698 458.63617516 C-27.0846398 453.94576639 -27.78632789 449.40031761 -27.80055332 443.83730412 C-27.81267661 441.91792751 -27.81267661 441.91792751 -27.82504481 439.95977563 C-27.82395895 438.54678882 -27.82268699 437.13380215 -27.82124901 435.72081566 C-27.82697002 434.21358204 -27.83355891 432.70635151 -27.84093982 431.19912511 C-27.85868416 427.058528 -27.86404548 422.9179931 -27.86738026 418.7773627 C-27.87313288 414.30801082 -27.8903222 409.83870102 -27.90607262 405.36937523 C-27.93514676 396.59999767 -27.9535757 387.83062816 -27.96841272 379.0612162 C-27.98614857 368.79903352 -28.01418093 358.53688655 -28.04254494 348.27472869 C-28.09296033 329.89839914 -28.13366585 311.52206062 -28.16910362 293.14569664 C-28.20326078 275.43636252 -28.24460927 257.72706494 -28.29410362 240.01776695 C-28.35685288 217.56009758 -28.41286558 195.10242074 -28.46363395 172.64472112 C-28.47757849 166.54766737 -28.4929543 160.45061932 -28.50956954 154.35357229 C-28.57833254 129.10357524 -28.60906653 103.85415601 -28.54179519 78.60412496 C-28.53611301 76.28422754 -28.53189243 73.96433187 -28.52810907 71.64443064 C-28.5133626 63.30452879 -28.47251167 54.96579621 -28.38561022 46.62628043 C-28.36341554 44.20832867 -28.34915704 41.79028797 -28.34373796 39.37224042 C-28.33433817 36.12676691 -28.29404799 32.88316262 -28.24486351 29.6380825 C-28.24862846 28.72008373 -28.2523934 27.80208496 -28.25627244 26.85626805 C-28.05741308 18.19001588 -24.91551428 11.27425992 -18.66104698 5.25726891 C-13.27565048 0.57039663 -6.91298952 0.00751689 0 0 Z M9.65145302 37.94476891 C7.77968163 41.58979739 7.35051676 45.18065341 7.46395302 49.25726891 C9.28869747 54.63012757 12.41197373 57.73127926 17.46395302 60.25726891 C21.72551886 60.87274185 25.76520746 61.20720495 29.60848427 59.05805016 C34.07754155 55.32285912 36.2680844 52.28124464 36.83895302 46.38226891 C36.7095746 42.0319195 35.33507541 39.58172641 32.46395302 36.25726891 C28.30729507 32.58394328 25.04844205 31.61187212 19.64364052 31.86664391 C15.37426794 32.63176444 12.73001452 35.07852199 9.65145302 37.94476891 Z M63.08895302 39.00726891 C61.14140472 42.9023655 60.66364868 46.02708883 61.46395302 50.25726891 C62.84610536 54.15524911 64.75829568 56.7485392 68.15145302 59.19476891 C72.39712429 60.55658799 76.04949144 60.97719006 80.46395302 60.25726891 C84.34121616 58.24683617 87.36220163 56.12891619 89.46395302 52.25726891 C91.01710201 46.4884298 90.20843307 42.41017023 87.46395302 37.25726891 C84.75757295 33.9588682 82.7322298 32.52082106 78.41317177 32.01898766 C71.36780385 31.78779251 67.78022725 33.57526716 63.08895302 39.00726891 Z M117.07332802 37.98773766 C114.82135393 41.74853438 114.14934227 44.60566841 114.90145302 48.94476891 C116.4904072 54.43044407 119.80910879 57.15403942 124.46395302 60.25726891 C129.40763934 60.98903659 133.39969103 60.77972479 137.90145302 58.56976891 C141.91553369 54.94730586 143.61667853 52.29298418 143.90145302 46.88226891 C143.72148217 41.97397299 142.37939469 39.19705495 139.46395302 35.25726891 C135.85309632 32.05908155 132.40807199 31.72329973 127.74129677 31.91742516 C123.13125268 32.60537342 119.99652643 34.3501621 117.07332802 37.98773766 Z M308.58895302 40.44476891 C306.6955085 45.17838021 306.79676428 49.25570269 308.40145302 54.06976891 C312.80058697 58.73551704 318.91956809 59.3937788 325.06515026 59.59600353 C328.79374323 59.65600961 332.52024121 59.64417666 336.24910927 59.62055016 C337.87617937 59.62003051 339.50325011 59.62055225 341.1303196 59.62206078 C344.52686473 59.62197146 347.92317049 59.61162536 351.31966591 59.59345055 C355.65588099 59.57074678 359.99174759 59.57022707 364.32800579 59.57696819 C367.68333935 59.58032189 371.03859461 59.57365208 374.39391327 59.56383896 C375.99217188 59.56001217 377.59043924 59.55882819 379.18870163 59.5604248 C381.42783547 59.56079894 383.66653532 59.5480797 385.90560341 59.53192711 C387.17529472 59.52731972 388.44498604 59.52271233 389.75315285 59.51796532 C395.44611779 59.11801505 400.04766313 58.49652256 404.46395302 54.63226891 C406.87434176 50.56473791 407.46442056 47.86492677 406.46395302 43.25726891 C404.37890252 39.23610009 402.73031169 36.80456355 398.46395302 35.25726891 C395.80003622 35.06184516 393.24115827 34.97372933 390.57772255 34.9826107 C389.78698341 34.97749977 388.99624428 34.97238884 388.18154335 34.96712303 C385.56987354 34.95323336 382.95846786 34.95418349 380.34676552 34.95648766 C378.52839497 34.95260003 376.71002534 34.94826522 374.89165688 34.94350243 C371.08027643 34.93604131 367.26898862 34.93633046 363.45760536 34.94159508 C358.57955916 34.94738583 353.70189313 34.93046777 348.82390976 34.9072504 C345.06804636 34.89249868 341.31227418 34.89164339 337.55638695 34.89476013 C335.75829631 34.89424752 333.96020048 34.88902107 332.16213799 34.87894821 C329.64416708 34.86657485 327.12693218 34.87338089 324.60897255 34.88495445 C323.50061546 34.87348885 323.50061546 34.87348885 322.36986732 34.86179161 C316.69320677 34.91929632 312.35686447 36.04887221 308.58895302 40.44476891 Z M252.46395302 86.25726891 C251.29355006 87.86466305 250.15387647 89.49444248 249.02645302 91.13226891 C234.18893593 111.6724616 215.63760641 118.54087021 191.54793739 123.48578453 C179.51449908 126.10980263 168.11555626 130.08578671 160.46395302 140.25726891 C157.49731333 145.46726771 157.49731333 145.46726771 156.46395302 151.25726891 C155.18520302 151.48414391 153.90645302 151.71101891 152.58895302 151.94476891 C144.41771587 153.77203769 137.58970727 157.61512683 131.46395302 163.25726891 C131.79395302 163.91726891 132.12395302 164.57726891 132.46395302 165.25726891 C134.55473244 165.63307234 136.66424826 165.9060437 138.77645302 166.13226891 C152.52653555 167.95540738 168.95551473 173.1764753 178.12410927 184.26508141 C184.09964501 193.28664233 188.84230849 202.78773774 186.81160927 213.79242516 C186.26164825 216.24317309 185.6788409 218.6868677 185.05770302 221.12055016 C184.25898194 224.85454551 184.25898194 224.85454551 185.46395302 228.25726891 C188.21612095 230.49657171 188.21612095 230.49657171 191.52645302 232.50726891 C192.63117958 233.21367516 193.73590614 233.92008141 194.87410927 234.64789391 C195.72875771 235.17898766 196.58340614 235.71008141 197.46395302 236.25726891 C201.38709944 234.58136169 204.44681566 231.93456398 207.71395302 229.25726891 C218.46789755 220.63267685 230.25179951 213.62207773 242.46395302 207.25726891 C240.49979258 200.57070129 237.79752071 194.6445006 234.40145302 188.56976891 C233.68541908 187.27571129 233.68541908 187.27571129 232.95491982 185.95551109 C228.65141283 178.31899993 223.77754043 171.21910577 218.46395302 164.25726891 C219.39594521 164.54601891 220.32793739 164.83476891 221.28817177 165.13226891 C233.78742108 168.84308672 245.39843733 170.49234485 257.46395302 164.25726891 C263.83225861 160.22604982 268.75100854 155.09162139 273.46395302 149.25726891 C269.84134987 148.04973452 268.57346331 148.62616389 264.96395302 149.69476891 C250.86103097 153.33858609 236.04298646 150.59503842 223.46395302 143.25726891 C224.23739052 142.78418297 225.01082802 142.31109703 225.80770302 141.82367516 C240.78919461 132.31191131 247.30546845 121.79860041 251.66707802 104.87055016 C252.77052729 99.86716496 253.61652121 94.95365609 253.52645302 89.81976891 C253.50582802 88.64414391 253.48520302 87.46851891 253.46395302 86.25726891 C253.13395302 86.25726891 252.80395302 86.25726891 252.46395302 86.25726891 Z M9.46395302 93.25726891 C9.38697032 100.49393342 9.3349682 107.7304898 9.2991581 114.96747398 C9.28420654 117.4219412 9.26383793 119.87638235 9.23763466 122.33075523 C8.93296136 151.63315746 12.28537028 175.40744914 33.47957802 197.37445641 C41.23042594 205.06869123 50.46600022 211.08658903 59.58016396 217.02289391 C63.60084622 219.65749338 67.59133075 222.33787264 71.58895302 225.00726891 C73.43260284 226.23658583 75.27635288 227.46575247 77.12020302 228.69476891 C91.98543739 238.60492516 91.98543739 238.60492516 106.85067177 248.51508141 C107.41242607 248.88956917 107.97418037 249.26405693 108.55295753 249.64989281 C111.45711195 251.58593582 114.36115689 253.52214264 117.26497841 255.45868492 C122.67789298 259.06829356 128.09206989 262.67596535 133.51082802 266.27680016 C134.91401283 267.21000084 134.91401283 267.21000084 136.34554482 268.16205406 C138.0598946 269.30203968 139.77484341 270.44112532 141.49056435 271.57904625 C146.53870778 274.93748937 151.4992091 278.39509485 156.41292763 281.94794273 C158.33936396 283.43662973 158.33936396 283.43662973 160.46395302 283.25726891 C161.8802346 281.22136413 163.18103457 279.1878703 164.46395302 277.06976891 C171.16641189 266.33513711 178.86530727 256.552453 187.46395302 247.25726891 C184.79227991 245.21822216 182.07767488 243.30484031 179.26082802 241.47211266 C178.45427773 240.94706139 177.64772743 240.42201012 176.81673622 239.8810482 C175.95781776 239.32457603 175.09889931 238.76810387 174.21395302 238.19476891 C173.31571815 237.61187096 172.41748329 237.02897301 171.49202919 236.42841148 C165.65577497 232.650671 159.78640335 228.9326717 153.87899208 225.26752281 C147.70260567 221.42736896 141.58398622 217.49893308 135.46395302 213.56976891 C127.1396214 208.22963164 118.79143665 202.93118803 110.40145302 197.69476891 C109.42104042 197.08246422 108.44062782 196.47015953 107.43050575 195.83930016 C102.36887861 192.68175552 97.29955436 189.53719413 92.22176552 186.40570641 C75.19289762 175.88182866 58.65785575 165.48644225 44.46395302 151.25726891 C43.67891396 150.48383141 42.89387489 149.71039391 42.08504677 148.91351891 C27.31356185 133.48141301 16.478 113.64141855 10.46395302 93.25726891 C10.13395302 93.25726891 9.80395302 93.25726891 9.46395302 93.25726891 Z M402.46395302 94.25726891 C402.14140541 95.11554283 402.14140541 95.11554283 401.81234169 95.99115562 C391.81706666 122.26579883 377.42936915 146.16441715 354.77645302 163.44476891 C354.04732704 164.00156334 353.31820107 164.55835777 352.56698036 165.13202477 C344.72577262 170.993456 336.3655376 175.87213847 327.92098427 180.79974937 C324.08772903 183.07364979 320.34095181 185.47749868 316.58895302 187.88226891 C308.44904432 193.0745059 300.18824807 198.05477858 291.90145302 203.00726891 C273.08060963 214.26727996 254.31742182 225.58528922 236.02645302 237.69476891 C234.93115273 238.41599937 233.83585243 239.13722984 232.70736122 239.88031578 C213.7523457 252.54709631 196.99715763 268.14219604 184.46395302 287.25726891 C183.81168739 288.23695641 183.15942177 289.21664391 182.48739052 290.22601891 C166.65176046 315.61883538 162.62685598 347.74883264 169.01864052 376.77631187 C174.83025171 400.67297547 185.95487708 422.90775713 200.02645302 443.00726891 C200.53917763 443.74082603 201.05190224 444.47438316 201.58016396 445.2301693 C202.8185362 446.94783747 204.13412361 448.60939041 205.46395302 450.25726891 C206.12395302 450.25726891 206.78395302 450.25726891 207.46395302 450.25726891 C208.89082252 448.11696466 210.18838275 445.98622082 211.46395302 443.75726891 C212.28055284 442.36729415 213.09829868 440.97799216 213.91707802 439.58930016 C214.33924599 438.86951988 214.76141396 438.14973961 215.19637489 437.40814781 C229.88881028 412.47741674 247.39288033 390.06647482 267.46395302 369.25726891 C268.23610146 368.44387047 269.00824989 367.63047203 269.80379677 366.79242516 C274.96399563 361.46338543 280.65013953 356.85280318 286.46395302 352.25726891 C287.39465614 351.50961266 288.32535927 350.76195641 289.28426552 349.99164391 C299.61285876 341.84742678 310.56362269 334.60636039 321.46395302 327.25726891 C364.80464617 298.02237345 385.46225191 265.49726545 397.90145302 214.75726891 C398.17280067 213.66430504 398.44414833 212.57134117 398.72371864 211.44525719 C398.96670692 210.42415855 399.20969521 209.40305992 399.46004677 208.35101891 C399.78767006 206.98493492 399.78767006 206.98493492 400.121912 205.59125328 C400.66470007 203.10876963 400.66470007 203.10876963 399.46395302 200.25726891 C399.08625771 200.91211266 398.70856239 201.56695641 398.31942177 202.24164391 C386.94328704 221.10418111 370.08019451 233.37936929 351.70711708 244.85541344 C349.40925159 246.29145432 347.11938017 247.73953876 344.83114052 249.19086266 C339.24431572 252.73188118 333.64604523 256.25463448 328.04793739 259.77777672 C319.0293779 265.45545283 310.02733567 271.15403775 301.0972538 276.97015953 C297.07580023 279.58461717 293.03372363 282.16154473 288.96785927 284.70648766 C273.94193847 294.12566432 260.3247232 304.03021783 247.46395302 316.25726891 C246.43914833 317.18539391 246.43914833 317.18539391 245.39364052 318.13226891 C220.82092417 341.16276456 209.83689916 371.69032793 205.46395302 404.25726891 C199.85482526 373.8480354 198.59001909 345.03386997 216.79012489 318.31000328 C225.10140869 306.54790152 234.20566566 295.32754989 245.46395302 286.25726891 C246.33793739 285.54570641 247.21192177 284.83414391 248.11239052 284.10101891 C263.24972018 272.1156782 279.77145851 261.95301244 296.12117958 251.72504234 C300.07603107 249.2472842 304.01937226 246.75133244 307.96395302 244.25726891 C312.77123073 241.22002241 317.57933098 238.1840943 322.38973427 235.15180016 C331.77737098 229.23269536 341.16146285 223.30964919 350.46395302 217.25726891 C351.39981239 216.65036217 351.39981239 216.65036217 352.35457802 216.03119469 C360.38931232 210.8066087 368.11474108 205.43060693 375.46395302 199.25726891 C376.43332802 198.48769859 377.40270302 197.71812828 378.40145302 196.92523766 C392.58078462 185.06538539 401.14471583 166.83794801 402.79036903 148.64960289 C403.49721553 136.98987147 403.58114596 125.37325983 403.52645302 113.69476891 C403.52142083 111.79698365 403.516861 109.89919708 403.51278114 108.00140953 C403.50192816 103.41999597 403.48476146 98.83864762 403.46395302 94.25726891 C403.13395302 94.25726891 402.80395302 94.25726891 402.46395302 94.25726891 Z M12.46395302 200.25726891 C12.99164623 207.08730839 14.0264485 213.60492642 15.65145302 220.25726891 C15.8721244 221.16517174 16.09279579 222.07307457 16.32015419 223.00848961 C23.83374172 253.12324255 36.84967331 281.66394516 58.46395302 304.25726891 C59.16262489 305.03070641 59.86129677 305.80414391 60.58114052 306.60101891 C67.82634109 314.32254754 76.31021516 320.2212653 84.87459755 326.38226891 C92.48710855 331.89462837 99.97026676 337.58505491 107.46395302 343.25726891 C108.12266396 343.7532357 108.78137489 344.2492025 109.46004677 344.76019859 C116.43387868 350.02743211 123.05533486 355.561526 129.46395302 361.50726891 C130.3810807 362.35720421 130.3810807 362.35720421 131.31673622 363.22430992 C134.89686319 366.60518475 138.12708421 370.11517348 141.20223427 373.96332359 C141.61860146 374.39032555 142.03496864 374.8173275 142.46395302 375.25726891 C143.12395302 375.25726891 143.78395302 375.25726891 144.46395302 375.25726891 C144.39176552 374.44387047 144.31957802 373.63047203 144.24520302 372.79242516 C142.44529516 350.56856282 143.35394544 328.58729163 150.46395302 307.25726891 C145.15761825 302.78746221 139.73349161 298.67818653 133.93270302 294.87445641 C132.59946549 293.99284837 131.2667318 293.11047807 129.934412 292.22748375 C129.21719978 291.75220238 128.49998756 291.27692101 127.76104164 290.78723717 C123.54320194 287.97795902 119.3506831 285.1312616 115.15535927 282.28851891 C113.31751921 281.04495459 111.47962791 279.80146599 109.64168739 278.55805016 C106.83305378 276.6575667 104.0249855 274.75627338 101.21859169 272.85248375 C91.5594243 266.30169396 81.888215 259.80807335 71.95987892 253.67094994 C41.48570627 234.83198185 41.48570627 234.83198185 29.46395302 222.25726891 C28.73821083 221.52765953 28.01246864 220.79805016 27.26473427 220.04633141 C22.28481408 214.79132991 18.66944404 209.00167921 15.03035927 202.78461266 C14.51344521 201.95058922 13.99653114 201.11656578 13.46395302 200.25726891 C13.13395302 200.25726891 12.80395302 200.25726891 12.46395302 200.25726891 Z " fill="currentColor" stroke="none" /></svg>
    }
}

#[function_component(SidebarHeaderWithLogo)]
pub fn sidebar_header_with_logo() -> Html {
    let layout_context = use_context::<LayoutContext>().expect("LayoutContext not found");
    let folded = layout_context.sidebar_folded; // Use

    match folded {
        true => html! {
            <SidebarHeader>
                <Logo class="h-16 w-16"/>
            </SidebarHeader>
        },
        false => html! {
            <SidebarHeader>
                <div class="flex items-center justify-start p-4 w-full h-16 space-x-2">
                    <Logo class="h-10 w-10"/>
                    <div class="text-2xl font-bold">{"Wonop UI"}</div>
                </div>
            </SidebarHeader>
        },
    }
}

#[function_component(DocumentationLayout)]
pub fn documentation_layout(props: &DocumentationLayoutProps) -> Html {
    let layout_context = use_context::<LayoutContext>().expect("LayoutContext not found");
    let navigator = use_navigator().unwrap();
    let folded = layout_context.sidebar_folded;
    /*
    let fold = {
        let layout_context = layout_context.clone();
        Callback::from(move |_| {
            layout_context.dispatch(LayoutAction::SetSidebarFolded(!folded));
        })
    };
    */

    let mobile_menu_open = layout_context.mobile_menu_open;
    let open_mobile_menu = {
        let layout_context = layout_context.clone();
        Callback::from(move |_| {
            layout_context.dispatch(LayoutAction::SetMobileMenuOpen(!mobile_menu_open));
        })
    };

    let sidebar = html! {
        <Sidebar
            header={html!{
                <SidebarHeaderWithLogo />
            }}>
            <SidebarHeading>{"Getting started"}</SidebarHeading>
            <SidebarMenu>
                <SidebarLink<Route> label="Introduction" to={Route::GettingStarted} />
                // <SidebarLink<Route> label="Installation" to={Route::Installation} />
                // <SidebarLink<Route> label="Usage" to={Route::Usage} />
            </SidebarMenu>
            <SidebarHeading>{"Components"}</SidebarHeading>
            <SidebarMenu>
                <SidebarLink<Route> label="Accordion" to={Route::AccordionExample} />
                <SidebarLink<Route> label="Alert" to={Route::AlertExample} />
                <SidebarLink<Route> label="Avatar" to={Route::AvatarExample} />
                <SidebarLink<Route> label="Badge" to={Route::BadgeExample} />
                <SidebarLink<Route> label="Breadcrumb" to={Route::BreadcrumbExample} />
                <SidebarLink<Route> label="Button" to={Route::ButtonExample} />
                <SidebarLink<Route> label="Calendar" to={Route::CalendarExample} />
                <SidebarLink<Route> label="Card" to={Route::CardExample} />
                <SidebarLink<Route> label="Carousel" to={Route::CarouselExample} />
                <SidebarLink<Route> label="Checkbox" to={Route::CheckboxExample} />
                <SidebarLink<Route> label="Col" to={Route::ColExample} />
                <SidebarLink<Route> label="Collapsible" to={Route::CollapsibleExample} />
                <SidebarLink<Route> label="Color Picker" to={Route::ColorPickerExample} />
                <SidebarLink<Route> label="Combobox" to={Route::ComboboxExample} />
                <SidebarLink<Route> label="Command" to={Route::CommandExample} />
                <SidebarLink<Route> label="Container" to={Route::ContainerExample} />
                <SidebarLink<Route> label="Content" to={Route::ContentExample} />
                <SidebarLink<Route> label="Context Menu" to={Route::ContextMenuExample} />
                <SidebarLink<Route> label="Copy Button" to={Route::CopyButtonExample} />
                <SidebarLink<Route> label="Data Table" to={Route::DataTableExample} />
                <SidebarLink<Route> label="Date Picker" to={Route::DatePickerExample} />
                <SidebarLink<Route> label="Dialog" to={Route::DialogExample} />
                <SidebarLink<Route> label="Divider" to={Route::DividerExample} />
                <SidebarLink<Route> label="Drag Point" to={Route::DragPointExample} />
                <SidebarLink<Route> label="Drawer" to={Route::DrawerExample} />
                <SidebarLink<Route> label="Dropdown" to={Route::DropdownExample} />
                <SidebarLink<Route> label="Group Button" to={Route::GroupButtonExample} />
                <SidebarLink<Route> label="Iframe" to={Route::IframeExample} />
                <SidebarLink<Route> label="Input" to={Route::InputExample} />
                <SidebarLink<Route> label="Label" to={Route::LabelExample} />
                <SidebarLink<Route> label="Media Query" to={Route::MediaQueryExample} />
                <SidebarLink<Route> label="Multicol Sidebar" to={Route::MulticolSidebarExample} />
                <SidebarLink<Route> label="Notification" to={Route::NotificationExample} />
                <SidebarLink<Route> label="Page Header" to={Route::PageHeaderExample} />
                <SidebarLink<Route> label="Page Content" to={Route::PageContentExample} />
                <SidebarLink<Route> label="Pagination" to={Route::PaginationExample} />
                <SidebarLink<Route> label="Paint Canvas" to={Route::PaintCanvasExample} />
                <SidebarLink<Route> label="Placeholder" to={Route::PlaceholderExample} />
                <SidebarLink<Route> label="Popover" to={Route::PopoverExample} />
                <SidebarLink<Route> label="Resizable" to={Route::ResizableExample} />
                <SidebarLink<Route> label="Select" to={Route::SelectExample} />
                <SidebarLink<Route> label="Selectable" to={Route::SelectableExample} />
                <SidebarLink<Route> label="Sidebar" to={Route::SidebarExample} />
                <SidebarLink<Route> label="Switch" to={Route::SwitchExample} />
                <SidebarLink<Route> label="Table" to={Route::TableExample} />
                <SidebarLink<Route> label="Tabs" to={Route::TabsExample} />
                <SidebarLink<Route> label="Tag Input" to={Route::TagInputExample} />
                <SidebarLink<Route> label="Tailwind Color Picker" to={Route::TailwindColorPickerExample} />
                <SidebarLink<Route> label="Textarea" to={Route::TextareaExample} />
                <SidebarLink<Route> label="Toggle" to={Route::ToggleExample} />
                <SidebarLink<Route> label="Topbar" to={Route::TopbarExample} />
                <SidebarLink<Route> label="Typography" to={Route::TypographyExample} />
                <SidebarLink<Route> label="Window Provider" to={Route::WindowProviderExample} />
            </SidebarMenu>
        </Sidebar>
    };

    let topbar = html! {
        <Topbar>
            <Container class="flex items-center justify-between py-2" variant={ContainerVariant::Large} padding_y={false}>
                <div class="h-full flex items-center space-x-2 py-2 relative">

                    <Command<Route>
                        class="absolute top-0 left-0 min-w-[300px]"
                        placeholder="Search documentation..."
                        options={create_search_index()}
                        on_select={Callback::from(move |route: Route| {
                            console::log!(format!("Selected: {:#?}", route));
                            navigator.push(&route);
                        })}
                    />

                </div>
                <div class="flex items-center space-x-2">
                    <DarkModeSwitch />
                    <Button onclick={open_mobile_menu} class="lg:hidden">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                        </svg>
                    </Button>
                </div>
            </Container>
        </Topbar>
    };

    html! {
        <Layout sidebar={Some(sidebar)} topbar={Some(topbar)}>
            { for props.children.iter() }
        </Layout>
    }
}

#[derive(Properties, PartialEq)]
pub struct AppLayoutProps {
    pub children: Children,
}

#[function_component(AppLayout)]
pub fn app_layout(props: &AppLayoutProps) -> Html {
    html! {
        <LayoutProvider>
            <DocumentationLayout>
                { for props.children.iter() }
            </DocumentationLayout>
        </LayoutProvider>
    }
}
